// Generated by CoffeeScript 1.6.3
(function() {
  var findRoot, fs, requireRoot, winston, _ROOTS;

  fs = require('fs');

  winston = require('winston');

  _ROOTS = {};

  findRoot = function(rootName) {
    "Finds the root for a given rootName; see requireRoot below";
    var relativePrefix, rootFile, rootPath;
    relativePrefix = "./";
    while (true) {
      rootPath = fs.realpathSync(relativePrefix);
      rootFile = "" + rootPath + "/" + rootName + ".root";
      if (fs.existsSync(rootFile)) {
        break;
      }
      if (rootPath === "/") {
        throw new Error("Never found .root file for '" + rootName + "'");
      }
      relativePrefix = "../" + relativePrefix;
    }
    winston.debug("rootPath for " + rootName + " is " + rootPath);
    return rootPath;
  };

  requireRoot = function(rootName) {
    "Searches recursively up the directory structure of the filesystem\nlooking for a file named <rootName>.root and when that is found, \nestablishes that directory as the root of <rootName>; this function\nthen returns a wrapper around require that looks for things relative\nto that root directory\n\nEx.\n  requireRoot = require './require-root'\n  requireNametag = requireRoot 'nametag-server'\n  model = requireNametag 'model'\n\nThe advantage of this is that you can move files around within a \nproject and not worry about trying to get the right number \nof '../'s in front of your requires\n\nThere doesn't seem to be a totally standard way of doing stuff\nlike this in the Node community right now; everyone seems to roll\ntheir own.\n\nAn alternative -- and perhaps quite sensible -- approach would be to\nlook for a matching package.json file up the tree, but that would be \nharder to implement and take more time (though that shouldn't really \nmatter)\n";
    var rootPath;
    if (_ROOTS[rootName] == null) {
      _ROOTS[rootName] = findRoot(rootName);
    }
    rootPath = _ROOTS[rootName];
    return function(m) {
      return require(rootPath + "/" + m);
    };
  };

  requireRoot.__expose = {
    _ROOTS: _ROOTS,
    findRoot: findRoot
  };

  module.exports = requireRoot;

}).call(this);
